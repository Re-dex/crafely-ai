generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(dbgenerated("concat('usr_', gen_random_uuid())")) @db.VarChar(255)
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now())

  apiKeys     ApiKey[]
  threads     Thread[]
  subscriptions UserSubscription[]
}

model ApiKey {
  id          String    @id @default(dbgenerated("concat('key_', gen_random_uuid())")) @db.VarChar(255)
  keyId       String    @unique
  hashedKey   String    
  name        String?   
  prefix      String?   
  permissions String[]  
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsedAt  DateTime?

  userId      String    
  user        User      @relation(fields: [userId], references: [id])

  @@index([userId, active])
  @@index([keyId])
}

model Thread {
  id            String    @id @default(dbgenerated("concat('thrd_', gen_random_uuid())")) @db.VarChar(255)
  name          String
  storageId     String?   @unique
  instructions  String?
  model         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  userId        String
  user          User      @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Package {
  id          String    @id @default(dbgenerated("concat('pkg_', gen_random_uuid())")) @db.VarChar(255)
  name        String    @unique
  description String?
  price       Float
  features    String[]
  interval    String    @default("month") // month or year
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  subscriptions UserSubscription[]
}

model UserSubscription {
  id            String    @id @default(dbgenerated("concat('sub_', gen_random_uuid())")) @db.VarChar(255)
  status        String    @default("active") // active, cancelled, expired
  startDate     DateTime  @default(now())
  endDate       DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  userId        String
  user          User      @relation(fields: [userId], references: [id])
  packageId     String
  package       Package   @relation(fields: [packageId], references: [id])

  @@index([userId])
  @@index([packageId])
}